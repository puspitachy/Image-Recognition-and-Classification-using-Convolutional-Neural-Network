# -*- coding: utf-8 -*-
"""Copy of Imageclassification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D4EOccD1K-NF1zJtN5TuR1A41uVcI6s2
"""

import os
import torch
import torchvision
import tarfile
from torchvision.datasets.utils import download_url
from torch.utils.data import random_split

project_name='Image Classification  and recongnition using Cifar 10 data'

# loading data from websites
url_of_data = "https://s3.amazonaws.com/fast-ai-imageclas/cifar10.tgz"
download_url(url_of_data, '.')

# Cifar 10 data are extracing
with tarfile.open('./cifar10.tgz', 'r:gz') as tar:
    tar.extractall(path='./data')

directory_of_data = './data/cifar10'

print(os.listdir(directory_of_data))
classes10 = os.listdir(directory_of_data + "/train")
print(classes10)

Files_of_airplane= os.listdir(directory_of_data + "/train/airplane")
print('Airplane traing examples:', len(Files_of_airplane))
print(Files_of_airplane[:5])

from torchvision.datasets import ImageFolder
from torchvision.transforms import ToTensor

dataset_of_cifar10 = ImageFolder(directory_of_data +'/train', transform=ToTensor())

imge, labell = dataset_of_cifar10[0]
print(imge.shape, labell)
imge

print(dataset_of_cifar10.classes)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib
import matplotlib.pyplot as plt
# %matplotlib inline

matplotlib.rcParams['figure.facecolor'] = '#ffffff'
plt.savefig("myfigur.png")
def show_example(imge, labell):
    print('Label of the picture: ', dataset_of_cifar10.classes[labell], "("+str(labell)+")")
    plt.imshow(imge.permute(1, 2, 0))

show_example(*dataset_of_cifar10[1099])

random_Nummber_seed = 42
torch.manual_seed(random_Nummber_seed);
Size_of_value= 5000
Traing_data_size = len(dataset_of_cifar10) - Size_of_value

Trained_data, value_0f_data = random_split(dataset_of_cifar10, [Traing_data_size, Size_of_value])
len(Trained_data), len(value_0f_data)

from torch.utils.data.dataloader import DataLoader

Total_size=128

train_dataset = DataLoader(Trained_data, Total_size, shuffle=True, num_workers=4, pin_memory=True)
val_dataset = DataLoader(value_0f_data, Total_size*2, num_workers=4, pin_memory=True)
from torchvision.utils import make_grid

def pro_batch(dl):
    for images, labels in dl:
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.set_xticks([]); ax.set_yticks([])
        ax.imshow(make_grid(images, nrow=16).permute(1, 2, 0))
        break
pro_batch(train_dataset)

def akernel(imge, kernel):
    dt, vt = imge.shape       # image dimensions
    dk, vk = kernel.shape      # kernel dimensions
    rom, con = dt-dk+1, vt-vk+1  # output dimensions
    output = torch.zeros([rom, con])
    for i in range(rom):
        for j in range(con):
            output[i,j] = torch.sum(imge[i:i+dk,j:j+vk] * kernel)
    return output

import torch.nn as nn
import torch.nn.functional as F
pytorchmodel = nn.Sequential(
    nn.Conv2d(3, 8, kernel_size=3, stride=1, padding=1),
    nn.MaxPool2d(2, 2)
)

for imge, labells in train_dataset:
    print('shape of the image from the dataset:', imge.shape)
    out = pytorchmodel (imge)
    print('shape out of the dataset:', out.shape)
    break

class ImageClassificationBase(nn.Module):
    def training_step(self, batch):
        images, labels = batch
        out = self(images)                  # Generate predictions
        loss = F.cross_entropy(out, labels) # Calculate loss
        return loss

    def validation_step(self, batch):
        images, labels = batch
        out = self(images)                    # Generate predictions
        loss = F.cross_entropy(out, labels)   # Calculate loss
        acc = accuracy(out, labels)           # Calculate accuracy
        return {'val_loss': loss.detach(), 'val_acc': acc}

    def validation_epoch_end(self, outputs):
        batch_losses = [x['val_loss'] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses
        batch_accs = [x['val_acc'] for x in outputs]
        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies
        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}

    def epoch_end(self, epoch, result):
        print("Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}".format(
            epoch, result['train_loss'], result['val_loss'], result['val_acc']))

def accuracy(outputs, labels):
    _, preds = torch.max(outputs, dim=1)
    return torch.tensor(torch.sum(preds == labels).item() / len(preds))

class Cifar10CnnModel(ImageClassificationBase):
    def __init__(self):
        super().__init__()
        self.network = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2), # output: 64 x 16 x 16

            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2), # output: 128 x 8 x 8

            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2), # output: 256 x 4 x 4

            nn.Flatten(),
            nn.Linear(256*4*4, 1024),
            nn.ReLU(),
            nn.Linear(1024, 512),
            nn.ReLU(),
            nn.Linear(512, 10))

    def forward(self, xb):
        return self.network(xb)

model = Cifar10CnnModel()

for images, labels in train_dataset:
    print('images.shape:', images.shape)
    out = model(images)
    print('out.shape:', out.shape)
    print('out[0]:', out[0])
    break

def get():
    """picking GPU if it is available, otherwise"""
    if torch.cuda.is_available():
        return torch.device('cuda')
    else:
        return torch.device('cpu')

def to_device(data, device):
    """Move tensor(s) to chosen device"""
    if isinstance(data, (list,tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)

class DeviceDataLoader():
    """Wrap a dataloader to move data to a device"""
    def __init__(self, dl, device):
        self.dl = dl
        self.device = device

    def __iter__(self):
        """Total batch data"""
        for b in self.dl:
            yield to_device(b, self.device)

    def __len__(self):
        """bbatch number"""
        return len(self.dl)

device = get()
device

train_dataset = DeviceDataLoader(train_dataset, device)
val_dataset = DeviceDataLoader(val_dataset, device)
to_device(model, device);

@torch.no_grad()
def evaluation(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):
    history = []
    optimizer = opt_func(model.parameters(), lr)
    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()
            optimizer.step()
            optimizer.zero_grad()
        # Validation phase
        result = evaluation(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        model.epoch_end(epoch, result)
        history.append(result)
    return history

model = to_device(Cifar10CnnModel(), device)

evaluation(model, val_dataset)

num_epochs = 10
optimal_func = torch.optim.Adam
lear_r = 0.001

x_history = fit(num_epochs, lear_r, model, train_dataset, val_dataset, optimal_func)

def accuracies(x_history):
    accuracies = [x['val_acc'] for x in x_history]
    plt.plot(accuracies, '-x')
    plt.xlabel('epoch')
    plt.ylabel('accuracy')
    plt.title('Accuracy vs. epochs number');

fig=plt.gcf()

plt.show(accuracies(x_history))
plt.draw()
fig.savefig('Plot0.png')

def losses(x_history):
    train_losses = [x.get('train_loss') for x in x_history]
    val_losses = [x['val_loss'] for x in x_history]
    plt.plot(train_losses, '-bx')
    plt.plot(val_losses, '-rx')
    plt.xlabel('epoch')
    plt.ylabel('loss')
    plt.legend(['Training data', 'Validation data'])
    plt.title('Loss vs. Epochs number');

fig1=plt.gcf()
plt.show(losses(x_history))
plt.draw()
fig1.savefig('Plot1.png')

test_dataset = ImageFolder(directory_of_data+'/test', transform=ToTensor())
def prediction_of_image(img, model):
    # Convert to a batch of 1
    xb = to_device(img.unsqueeze(0), device)
    # Get predictions from model
    yb = model(xb)
    # Pick index with highest probability
    _, preds  = torch.max(yb, dim=1)
    # Retrieve the class label
    return dataset_of_cifar10.classes[preds[0].item()]
img, label = test_dataset[0]
plt.imshow(img.permute(1, 2, 0))
print('Label of the picture:', dataset_of_cifar10.classes[label], ', Prediction of the picture:', prediction_of_image(img, model))



img, label = test_dataset[2022]
fig=plt.gcf()

plt.imshow(img.permute(1, 2, 0))
n=print('Label of the picture:', dataset_of_cifar10.classes[label], ', Prediction of the picture:', prediction_of_image(img, model))
plt.xlabel('pridiction: bird and label: bird')
plt.draw()
fig.savefig('birddy.png',dpi=100, bbox_inches = "tight")

img, label = test_dataset[6153]
plt.imshow(img.permute(1, 2, 0))
fig=plt.gcf()
print('Label of the picture:', dataset_of_cifar10.classes[label], ', Prediction of the picture:', prediction_of_image(img, model))
plt.xlabel('pridiction: Frog and label: Frog')
plt.draw()
fig.savefig('Frog.png',dpi=100, bbox_inches = "tight")

plt.savefig('huu.png', dpi=700)
img, label = test_dataset[4253]



print('Label of the picture:', dataset_of_cifar10.classes[label], ', Prediction of the picture:', prediction_of_image(img, model))
plt.imshow(img.permute(1, 2, 0))

test_loader = DeviceDataLoader(DataLoader(test_dataset, Total_size*2), device)
Final_result = evaluate(model, test_loader)
Final_result

torch.save(model.state_dict(), 'classification_model_of_cifar10-cnn.pth')

model32 = to_device(Cifar10CnnModel(), device)

model32.load_state_dict(torch.load('classification_model_of_cifar10-cnn.pth'))

evaluate(model32, test_loader)